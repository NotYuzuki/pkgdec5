/*
  Red-EyeX32 (c) 2017
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace pkgdec
{
    public class RSAKeyset
    {
        // d
        public byte[] PrivateExponent;
        // exponent1 = d mod (p - 1)
        public byte[] Exponent1;
        // exponent2 = d mod (q - 1)
        public byte[] Exponent2;
        // e
        public byte[] PublicExponent;
        // (InverseQ)(q) = 1 mod p
        public byte[] Coefficient;
        // n = p * q
        public byte[] Modulus;
        // p
        public byte[] Prime1;
        // q
        public byte[] Prime2;

        /// <summary>
        /// Modulus is in PkgPublicKeys[3], fortunately we have the whole thing!
        /// </summary>
        public static RSAKeyset PkgDerivedKey3Keyset = new RSAKeyset
        {
            Prime1 = new byte[]
          {
        0xD8, 0x4F, 0x78, 0x93, 0x8F, 0x31, 0xF4, 0x56, 0xE8, 0x28, 0xCF, 0x28, 0x90, 0x62, 0x04, 0xD9,
0x36, 0x99, 0xF6, 0xA3, 0x19, 0x6E, 0xC7, 0x27, 0x53, 0x6D, 0xFB, 0x68, 0x5E, 0x63, 0xC4, 0xCF,
0xAD, 0x76, 0x07, 0x88, 0x1F, 0x6F, 0x3F, 0xBD, 0x86, 0xBD, 0x3A, 0x05, 0x62, 0xC5, 0x22, 0xFD,
0x0A, 0x42, 0x7D, 0x12, 0x02, 0xC3, 0x77, 0xCE, 0xE3, 0x73, 0xC9, 0x51, 0xE7, 0x63, 0x07, 0x29,
0x89, 0x00, 0xF2, 0x91, 0x5E, 0xE5, 0xDD, 0xB1, 0x3F, 0x96, 0x14, 0xBA, 0xC3, 0x5F, 0xD2, 0x2B,
0x34, 0xBD, 0xA8, 0x5B, 0xFF, 0x86, 0xBC, 0xC7, 0x1E, 0x98, 0x8F, 0x64, 0x22, 0xE3, 0xA0, 0x2E,
0xC9, 0xD1, 0x8D, 0x44, 0xE4, 0xC0, 0xD0, 0x54, 0x5D, 0xBA, 0x7E, 0xC6, 0x59, 0x3A, 0xAE, 0xCB,
0x0E, 0x1D, 0x1E, 0xB3, 0xDD, 0x7F, 0x61, 0x35, 0x3B, 0xF4, 0x88, 0x11, 0xFB, 0xBB, 0x6F, 0xA5,
0x0D, 0xF5, 0x35, 0x7F, 0x38, 0xE8, 0x07, 0xE1, 0xC3, 0xC3, 0xFE, 0xF1, 0x52, 0xCB, 0xC6, 0xB2,
0xC2, 0xB4, 0x67, 0x4F, 0x3D, 0x7D, 0x44, 0x39, 0xC8, 0xEE, 0xA0, 0xEF, 0x17, 0xB4, 0x00, 0xA2,
0x02, 0xD2, 0x3E, 0x93, 0x39, 0x4A, 0xA2, 0xB2, 0x0F, 0x57, 0x7A, 0x06, 0x15, 0x28, 0xF1, 0xB8,
0xD5, 0xC8, 0x53, 0xD0, 0x7F, 0x35, 0xA7, 0x53, 0xCB, 0x24, 0x37, 0x3E, 0xE0, 0x05, 0xC5, 0xC9
          },
            Prime2 = new byte[]
          {
        0xCA, 0x83, 0x67, 0x7F, 0xF3, 0x9E, 0x73, 0x47, 0xD9, 0x0F, 0x99, 0x55, 0xC5, 0x5A, 0x56, 0x57,
0xC3, 0x54, 0x3B, 0xA9, 0x66, 0xBA, 0x86, 0x10, 0xE0, 0xB1, 0x2F, 0xC2, 0x96, 0xD5, 0xF1, 0xD1,
0xD8, 0xCF, 0xF2, 0x7D, 0x03, 0xAE, 0xCE, 0xEC, 0xCC, 0x77, 0x06, 0x5F, 0x31, 0x99, 0x9E, 0x3A,
0x84, 0x37, 0xB1, 0x86, 0x24, 0x13, 0x75, 0x75, 0x9E, 0xAA, 0x8C, 0x8D, 0x66, 0xCB, 0x5F, 0x4A,
0xB7, 0xAD, 0x64, 0x18, 0x9C, 0x5C, 0x63, 0x4C, 0x7D, 0xB3, 0x73, 0x70, 0xE2, 0x82, 0x24, 0xE3,
0x2E, 0xCB, 0xCA, 0x09, 0xB0, 0x8E, 0xDF, 0x64, 0xA9, 0x9E, 0x3E, 0x62, 0xD9, 0xB4, 0xA1, 0xA6,
0xC7, 0x5E, 0xAC, 0x51, 0xB1, 0x82, 0xE3, 0xD5, 0x6D, 0xD0, 0x71, 0xE2, 0x38, 0xBD, 0x56, 0x41,
0xD9, 0x9E, 0xCB, 0xE2, 0x91, 0xEB, 0x5F, 0x48, 0xFB, 0xFA, 0x53, 0x43, 0x06, 0xB8, 0x7D, 0x60,
0xE4, 0x40, 0x1D, 0x18, 0x4B, 0xE0, 0x5A, 0x23, 0x69, 0xCF, 0x39, 0xE0, 0x59, 0xFB, 0x47, 0xC3,
0xB5, 0x03, 0xF4, 0xAA, 0xA8, 0x82, 0xF3, 0x7D, 0x37, 0x61, 0xDE, 0xCE, 0x5E, 0xA7, 0x0D, 0x87,
0x1E, 0x09, 0xB3, 0x76, 0xAA, 0x54, 0xEF, 0x33, 0xAA, 0xBD, 0xF2, 0x78, 0xED, 0x68, 0xB2, 0xE2,
0x51, 0x66, 0x81, 0x07, 0x7C, 0xEE, 0x51, 0x6F, 0x2E, 0x7C, 0x59, 0x03, 0x35, 0x8E, 0x52, 0x69
          },
            PrivateExponent = new byte[]
          {
        0x8E, 0x04, 0xF3, 0xC5, 0x2C, 0x71, 0x85, 0x76, 0x5F, 0x85, 0x3C, 0x55, 0xE5, 0x29, 0x9C, 0xD4,
0xA3, 0xCE, 0x14, 0xCB, 0xAA, 0xE4, 0x89, 0x01, 0x3A, 0xDF, 0xB9, 0x66, 0x98, 0x45, 0xDF, 0x09,
0xAC, 0x41, 0x11, 0x50, 0x88, 0x0B, 0x71, 0xFD, 0x55, 0x52, 0xFC, 0xBC, 0x46, 0xFB, 0x44, 0x38,
0x1E, 0x26, 0xE2, 0xE6, 0x29, 0x7A, 0x65, 0xEB, 0xA1, 0xCF, 0x1A, 0x48, 0x26, 0x69, 0x1E, 0xE9,
0x6E, 0x07, 0xB3, 0x34, 0x1D, 0xD8, 0x6A, 0xB4, 0x6B, 0x51, 0xA7, 0x85, 0xC8, 0xC0, 0x82, 0xF5,
0x93, 0xFF, 0x4B, 0x42, 0x17, 0xCA, 0x52, 0xA5, 0x8A, 0xD7, 0x33, 0x33, 0xC0, 0xD6, 0x27, 0xFD,
0xA9, 0x92, 0x88, 0x85, 0x22, 0x92, 0x70, 0xC4, 0xA6, 0x49, 0xCD, 0xE9, 0x18, 0x60, 0x26, 0xC8,
0xA5, 0x0A, 0x63, 0x6A, 0xCF, 0xC9, 0x1F, 0xCF, 0xB7, 0xCF, 0x4F, 0x8D, 0xB1, 0xC5, 0xE3, 0xAA,
0x0C, 0x14, 0x02, 0x0A, 0xF1, 0xC9, 0x08, 0xFD, 0x51, 0xCF, 0x02, 0x22, 0x98, 0xA4, 0xE5, 0xCD,
0x20, 0xEE, 0x57, 0x9B, 0x0A, 0x61, 0xBB, 0x58, 0xF6, 0x98, 0xD0, 0x5C, 0x41, 0x96, 0x8F, 0x8C,
0x24, 0x04, 0xF2, 0xDA, 0x79, 0x64, 0xE2, 0x0C, 0xDB, 0x54, 0x65, 0x9E, 0xDF, 0x6E, 0xA0, 0xFE,
0xFD, 0xC8, 0x23, 0x16, 0xF9, 0x58, 0xFD, 0x66, 0xBC, 0x40, 0xCA, 0x01, 0x81, 0xD7, 0x67, 0x90,
0xF3, 0x28, 0xD2, 0x0E, 0xC9, 0x3B, 0xF5, 0xCA, 0xF6, 0xAB, 0xDD, 0xA3, 0xFF, 0x89, 0xFE, 0xA2,
0x47, 0x43, 0x8A, 0xC8, 0x25, 0xAF, 0xD8, 0x82, 0x2E, 0x13, 0x89, 0x70, 0xFE, 0x8E, 0xFB, 0x19,
0xDD, 0xD3, 0x73, 0xA5, 0xCE, 0xCB, 0xBF, 0xCC, 0x2E, 0x04, 0x79, 0x58, 0xFC, 0xD8, 0xE7, 0xAD,
0x3A, 0x5A, 0x6C, 0x33, 0x9D, 0x98, 0xFB, 0x79, 0x47, 0xEA, 0x03, 0x4D, 0x72, 0x4B, 0x90, 0x36,
0x48, 0x7A, 0x8E, 0x00, 0x69, 0x49, 0x1E, 0x1A, 0xD4, 0x97, 0xE1, 0xE8, 0x57, 0x95, 0x74, 0xE2,
0x9E, 0xEF, 0xA6, 0x2A, 0xD2, 0x25, 0x1D, 0x83, 0xDA, 0xD7, 0x3A, 0x4F, 0x1A, 0xAA, 0xAC, 0xF7,
0x1E, 0xDF, 0x35, 0x10, 0x55, 0x7D, 0x8D, 0xB4, 0x71, 0x4F, 0xD0, 0x5D, 0x63, 0xDC, 0x74, 0xEA,
0xE3, 0x62, 0x1D, 0x2B, 0x04, 0x06, 0xC5, 0x12, 0x6F, 0xC7, 0xD6, 0xA1, 0x0B, 0x99, 0x56, 0x38,
0x9C, 0x75, 0x56, 0xCB, 0xDA, 0x51, 0xC4, 0x4B, 0x5D, 0xAC, 0x87, 0xBB, 0x97, 0xD6, 0x46, 0x8D,
0xA7, 0x1E, 0x27, 0xD5, 0x83, 0x2E, 0xFA, 0x96, 0x00, 0x48, 0xD0, 0x53, 0xA4, 0x00, 0xC3, 0xAC,
0xFE, 0x2A, 0xBA, 0x68, 0xA3, 0xA1, 0xAF, 0x4F, 0x43, 0x7E, 0xA1, 0xAB, 0xBC, 0x31, 0xCD, 0x79,
0xA5, 0x14, 0x70, 0x7D, 0x61, 0x80, 0xBF, 0xFD, 0x58, 0xDA, 0x7C, 0x2A, 0x44, 0xAB, 0xBF, 0x41
          },
            Exponent1 = new byte[]
          {
0x07, 0x78, 0x1F, 0x0A, 0xC1, 0x5C, 0x11, 0x3A, 0xDB, 0x03, 0x65, 0xBB, 0xD9, 0xD8, 0x78, 0xA0,
0x63, 0x81, 0x47, 0x81, 0xF4, 0x43, 0xDD, 0xFE, 0x9E, 0xA3, 0xE2, 0x95, 0x85, 0x04, 0xDE, 0xEB,
0xE8, 0xEA, 0x75, 0x72, 0x1E, 0xDB, 0xC1, 0x90, 0xB2, 0xD1, 0x5F, 0xEA, 0x85, 0xB1, 0x96, 0xF6,
0xB3, 0xDE, 0xFD, 0xE0, 0x9C, 0x55, 0xD1, 0x92, 0x44, 0x4A, 0x60, 0x3E, 0x42, 0xC6, 0x29, 0x9E,
0x26, 0x8B, 0xF0, 0xD4, 0x52, 0x39, 0x8F, 0xC1, 0x2A, 0x17, 0xED, 0x99, 0x51, 0x5B, 0xC2, 0xAF,
0x19, 0x40, 0x1F, 0x4B, 0x25, 0xF4, 0xAA, 0x1A, 0x1A, 0x15, 0x5C, 0x86, 0x31, 0xAA, 0x38, 0x82,
0xC5, 0x17, 0x46, 0x50, 0x85, 0xB1, 0x9E, 0xBF, 0xFB, 0x08, 0x90, 0x8E, 0x1A, 0xD0, 0xAA, 0xEE,
0x7A, 0x0B, 0x49, 0x5F, 0x1E, 0x9B, 0xE2, 0x68, 0x6B, 0x2C, 0x93, 0x72, 0x43, 0x86, 0x02, 0x61,
0xE9, 0xAC, 0x78, 0xEF, 0x6E, 0xB0, 0x9C, 0x6D, 0x10, 0x4C, 0x79, 0x46, 0x2D, 0xFC, 0xB9, 0x5C,
0xBC, 0xDA, 0x6B, 0xE2, 0xD1, 0x95, 0xBC, 0xC0, 0x5E, 0x0E, 0xD7, 0x61, 0xCA, 0x28, 0xBE, 0x08,
0xDA, 0x1E, 0x16, 0x69, 0x11, 0x06, 0x61, 0xBD, 0xD2, 0x47, 0xCB, 0xFF, 0xDF, 0xC5, 0x2D, 0x2B,
0x9B, 0xBE, 0x32, 0x1E, 0xB5, 0xF5, 0xCD, 0x54, 0x58, 0x64, 0x64, 0xBF, 0xF8, 0x0E, 0x5A, 0xF9
          },
            Exponent2 = new byte[]
          {
0x3C, 0x99, 0x63, 0xB0, 0x43, 0x1B, 0x48, 0x0D, 0xD8, 0xE3, 0x35, 0x14, 0x18, 0x71, 0x36, 0xE3,
0x1E, 0x3D, 0x27, 0x79, 0x42, 0x97, 0x50, 0x24, 0xDE, 0xC7, 0xC6, 0xAD, 0xE8, 0xEA, 0xEE, 0x68,
0xC8, 0x03, 0x39, 0xE1, 0xB4, 0xE7, 0x6B, 0x5E, 0x2A, 0xB4, 0xF7, 0x40, 0x27, 0x1C, 0x7B, 0xDF,
0xB0, 0xCE, 0xE5, 0x9D, 0x69, 0x50, 0x35, 0x56, 0xD3, 0xFA, 0xDF, 0x02, 0x35, 0x1F, 0x68, 0x4D,
0x78, 0x77, 0x37, 0x3B, 0xB2, 0x16, 0x67, 0x54, 0x6D, 0x4C, 0xF4, 0x9F, 0x73, 0xF8, 0x53, 0xC7,
0x73, 0xAA, 0x61, 0xB3, 0xD2, 0x94, 0x7E, 0x3E, 0xA6, 0x0F, 0x07, 0x46, 0x17, 0x35, 0x59, 0x26,
0x0A, 0x04, 0xC7, 0x75, 0xCE, 0xB3, 0x87, 0x2F, 0xC7, 0xA3, 0x97, 0x60, 0x85, 0x70, 0x0A, 0xCE,
0xBB, 0xAB, 0x2C, 0x01, 0x89, 0x7E, 0xB0, 0x4D, 0xAB, 0xB1, 0x35, 0x97, 0x19, 0xFC, 0xBC, 0xEF,
0xF0, 0x7D, 0x4A, 0xF7, 0x89, 0x45, 0x02, 0x54, 0x14, 0x86, 0x81, 0x20, 0x24, 0x6C, 0xF0, 0x05,
0x9D, 0x36, 0x28, 0xD1, 0xA4, 0x89, 0x43, 0x09, 0x56, 0x38, 0x40, 0x2E, 0xEA, 0xDD, 0xFC, 0x4B,
0x51, 0x6E, 0xBF, 0xB8, 0x23, 0xB2, 0x34, 0xBD, 0xF6, 0x3A, 0xCE, 0xC2, 0xE6, 0xEF, 0xEC, 0x8F,
0x92, 0xA2, 0x24, 0xBC, 0x33, 0xE3, 0x30, 0x95, 0x1F, 0x88, 0xF0, 0x2D, 0xE8, 0xA9, 0xC4, 0xF9
          },
            Coefficient = new byte[]
          {
0x5C, 0x50, 0xEF, 0x23, 0x14, 0xDB, 0xE1, 0xCF, 0x19, 0x66, 0x8A, 0x93, 0x4D, 0xDC, 0xE7, 0x62,
0x34, 0x72, 0xA5, 0x2F, 0xFD, 0xA7, 0x69, 0x00, 0xCE, 0x05, 0x6C, 0x9A, 0x7A, 0x40, 0x5A, 0x55,
0x9D, 0x81, 0x4E, 0x49, 0xFC, 0xF3, 0x72, 0x36, 0x18, 0x62, 0x7A, 0x54, 0x68, 0x36, 0x3D, 0x90,
0x8E, 0xF4, 0xEE, 0x26, 0x33, 0x14, 0x66, 0x36, 0x6A, 0x1E, 0x66, 0x2D, 0x5B, 0x25, 0x52, 0x10,
0x5D, 0x85, 0x21, 0x11, 0xB9, 0x91, 0xDE, 0x79, 0x10, 0xE2, 0x9A, 0x25, 0xAF, 0x3B, 0x14, 0x2C,
0x30, 0xDF, 0x3C, 0x5B, 0x8D, 0xFF, 0xE8, 0x9C, 0x35, 0x96, 0xC6, 0xF5, 0x63, 0x09, 0xE8, 0x41,
0x9E, 0xD9, 0x61, 0x55, 0x94, 0x98, 0x2F, 0xD9, 0x86, 0x05, 0x32, 0x01, 0x23, 0x86, 0x74, 0xDC,
0x12, 0x4A, 0xF9, 0xD5, 0xB4, 0xFD, 0xA5, 0x9E, 0x6D, 0x28, 0xAE, 0x02, 0xDB, 0xEC, 0xE0, 0xCF,
0xB2, 0xC3, 0xAC, 0x6C, 0xBE, 0xEE, 0x64, 0x20, 0x63, 0xB4, 0x8E, 0xA7, 0xF0, 0x69, 0x96, 0xBD,
0xEC, 0x4D, 0xA7, 0xF8, 0x16, 0x14, 0x3C, 0xDA, 0x67, 0x69, 0xFC, 0xB5, 0x84, 0x47, 0x10, 0x71,
0xAC, 0x64, 0x24, 0xBD, 0x94, 0x3E, 0x8A, 0xE3, 0xDF, 0xB4, 0xA9, 0x54, 0x73, 0x1E, 0x4C, 0xD3,
0xB8, 0xF9, 0x08, 0xCC, 0x1D, 0x85, 0x3B, 0xC1, 0xCC, 0x0A, 0xCF, 0x47, 0xBB, 0xAD, 0x6B, 0x7B
          },
            Modulus = new byte[]
          {
0xAB, 0x1D, 0xBD, 0x43, 0x39, 0x49, 0x33, 0x16, 0xA3, 0x5C, 0x40, 0x4E, 0x2C, 0x22, 0x97, 0xB8,
0x33, 0x68, 0x5C, 0x1A, 0xD3, 0x54, 0xE8, 0xC5, 0xBA, 0x78, 0x88, 0xD1, 0xB0, 0xFA, 0xF2, 0x5A,
0x8F, 0x14, 0xAA, 0x06, 0x52, 0x8F, 0xA4, 0x65, 0x86, 0x6E, 0xD4, 0x23, 0x03, 0xD3, 0x00, 0x91,
0x0B, 0xD9, 0xD8, 0x41, 0x01, 0xFE, 0x54, 0xC1, 0x2B, 0xFC, 0x4F, 0x7F, 0x9C, 0x3A, 0x7A, 0xC9,
0x13, 0x33, 0xFD, 0x2C, 0xDC, 0xCB, 0x14, 0x00, 0x76, 0x1A, 0xDE, 0x5C, 0x2E, 0xBC, 0xA0, 0x11,
0x6D, 0x8C, 0x30, 0x4B, 0x8B, 0x47, 0xF3, 0x3C, 0x41, 0x37, 0x72, 0x84, 0x9E, 0x9E, 0x1D, 0x18,
0x3B, 0x4D, 0x7B, 0xBC, 0x99, 0x4C, 0x37, 0xED, 0x78, 0x87, 0xD4, 0x86, 0x94, 0x23, 0x4B, 0x71,
0xAC, 0xCB, 0x4D, 0xB9, 0x50, 0x70, 0x33, 0x66, 0x18, 0x97, 0x6E, 0xD6, 0x7B, 0x1C, 0x40, 0x1A,
0x21, 0x13, 0xD4, 0x39, 0x88, 0x03, 0x40, 0x49, 0x9F, 0x65, 0x6B, 0x7A, 0xEE, 0xB3, 0x86, 0xC0,
0x67, 0x98, 0xC2, 0xD1, 0x44, 0xEB, 0xB5, 0x84, 0xB5, 0x65, 0x7B, 0x28, 0xE2, 0x90, 0x94, 0x49,
0x31, 0x79, 0x9B, 0x0B, 0x09, 0xB2, 0x71, 0xA1, 0xD9, 0x37, 0x0B, 0xFE, 0x4F, 0x84, 0xBA, 0xCC,
0x78, 0xEA, 0x3C, 0x91, 0x7D, 0x30, 0x0D, 0x53, 0xD5, 0xC5, 0x6A, 0x34, 0x0B, 0x2B, 0x07, 0x56,
0x08, 0x0F, 0x28, 0x32, 0x53, 0x63, 0xEB, 0x9B, 0xC8, 0x4E, 0xB9, 0x1D, 0x70, 0x46, 0x8E, 0xEF,
0x8B, 0xD4, 0xAB, 0x30, 0x2F, 0x13, 0xF3, 0x00, 0x41, 0x70, 0x95, 0x79, 0xCA, 0xA5, 0x4E, 0x8B,
0xD7, 0x64, 0x23, 0x56, 0xEC, 0x85, 0x23, 0x0A, 0x15, 0x14, 0xE0, 0x06, 0x67, 0x56, 0x84, 0x23,
0x08, 0x1D, 0x64, 0x39, 0x96, 0x88, 0x33, 0xA5, 0x1C, 0x5B, 0x2F, 0xC7, 0xB6, 0xEF, 0x00, 0x62,
0x3F, 0xB7, 0x25, 0x89, 0x9A, 0x29, 0x67, 0xCB, 0xC1, 0x4C, 0xEE, 0xAE, 0xFE, 0x87, 0x47, 0x28,
0x02, 0x95, 0xA3, 0x1C, 0x90, 0x89, 0x59, 0xB3, 0x7E, 0xCE, 0xB0, 0x06, 0x41, 0x82, 0xC5, 0x33,
0x66, 0x4D, 0xED, 0x63, 0x55, 0xFF, 0x31, 0x3C, 0xF8, 0x2A, 0x89, 0x1A, 0x42, 0xDC, 0x88, 0x65,
0x5F, 0xDD, 0xFE, 0x71, 0xE6, 0x50, 0xE5, 0x1B, 0x14, 0x90, 0xA8, 0x88, 0xCE, 0x38, 0xD6, 0xFB,
0x85, 0x0E, 0x20, 0xD1, 0x24, 0x08, 0xCD, 0xB0, 0xF0, 0xEF, 0xAB, 0x2F, 0xF1, 0x9F, 0x9A, 0x95,
0x80, 0x2D, 0x43, 0x75, 0x60, 0xC0, 0xC9, 0x86, 0xC5, 0xF2, 0xCB, 0xB2, 0x0E, 0x2B, 0x89, 0x7F,
0x6B, 0xCB, 0x67, 0xA5, 0x65, 0x7B, 0x47, 0x24, 0xDB, 0xDA, 0x2C, 0xB3, 0x8F, 0xE2, 0x3D, 0x73,
0x8C, 0xF2, 0x6F, 0x8C, 0xC0, 0x6E, 0x0F, 0x12, 0x21, 0xFE, 0x74, 0x0D, 0x0E, 0x36, 0x81, 0x71
          },
            PublicExponent = new byte[] { 0, 1, 0, 1 }
        };
    }


    public partial class Main : Form
    {
        public Main()
        {
            InitializeComponent();
        }

        

        public static byte[] RSA2048Decrypt(byte[] ciphertext, RSAKeyset keyset)
        {
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            rsa.ImportParameters(new RSAParameters
            {
                P = keyset.Prime1,
                Q = keyset.Prime2,
                Exponent = keyset.PublicExponent,
                Modulus = keyset.Modulus,
                DP = keyset.Exponent1,
                DQ = keyset.Exponent2,
                InverseQ = keyset.Coefficient,
                D = keyset.PrivateExponent
            });
            return rsa.Decrypt(ciphertext, false);
        }

        private struct PackageEntry {
            public uint type;
            public uint unk1;
            public uint flags1;
            public uint flags2;
            public uint offset;
            public uint size;
            public byte[] padding;

            public uint key_index;
            public bool is_encrypted;

            public byte[] ToArray() {
                var ms = new MemoryStream();
                var writer = new EndianWriter(ms, EndianType.BigEndian);

                writer.Write(type);
                writer.Write(unk1);
                writer.Write(flags1);
                writer.Write(flags2);
                writer.Write(offset);
                writer.Write(size);
                writer.Write(padding);

                writer.Close();

                return ms.ToArray();
            }
        };

        private static byte[] DecryptAes(byte[] key, byte[] iv, byte[] data)
        {
            var aes = new AesCryptoServiceProvider();
            aes.Key = key;
            aes.IV = iv;
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.Zeros;
            aes.BlockSize = 128;

            return aes.CreateDecryptor(key, iv).TransformFinalBlock(data, 0, data.Length);
        }

        private static byte[] Sha256(byte[] buffer, int offset, int length)
        {
            var sha = new SHA256Managed();
            sha.TransformFinalBlock(buffer, offset, length);
            return sha.Hash;
        }

        public static BigInteger FromBigEndian(byte[] p)
        {
            Array.Reverse(p);
            if (p[p.Length - 1] > 127) {
                Array.Resize(ref p, p.Length + 1);
                p[p.Length - 1] = 0;
            }
            return new BigInteger(p);
        }

        public static BigInteger ExtendedEuclidGcd(BigInteger a, BigInteger b,
            out BigInteger lastx, out BigInteger lasty)
        {
            var x = BigInteger.Zero;
            lastx = BigInteger.One;

            var y = BigInteger.One;
            lasty = BigInteger.Zero;

            while (!b.IsZero) {
                BigInteger remainder;
                BigInteger q = BigInteger.DivRem(a, b, out remainder);

                a = b;
                b = remainder;
                var t = x;
                x = lastx - q * x;
                lastx = t;
                t = y;
                y = lasty - q * y;
                lasty = t;
            }

            return a;
        }

        public static BigInteger ModularInverse(BigInteger a, BigInteger n)
        {
            BigInteger d, x, y;
            d = ExtendedEuclidGcd(a, n, out x, out y);

            if (d.IsOne) {
                // Always return the least positive value
                return (x + n) % n;
            } else {
                throw new ArgumentException("the arguments must be relatively prime, i.e. their gcd must be 1");
            }
        }

        static byte[] ToByteArrayBE(BigInteger b)
        {
            var x = b.ToByteArray(); // x is little-endian
            Array.Reverse(x);        // now it is big-endian

            if (x[0] == 0) {
                var newarray = new byte[x.Length - 1];
                Array.Copy(x, 1, newarray, 0, newarray.Length);
                return newarray;
            } else {
                return x;
            }
        }

        public static int AesCbcCfb128Decrypt(byte[] @out, byte[] @in, uint size, byte[] key, byte[] iv)
        {
            var cipher = new AesManaged
            {
                Mode = CipherMode.CBC,
                KeySize = 128,
                Key = key,
                IV = iv,
                Padding = PaddingMode.None,
                BlockSize = 128,
            };
            var tmp = new byte[size];
            using (var ct_stream = new MemoryStream(@in))
            using (var pt_stream = new MemoryStream(tmp))
            using (var dec = cipher.CreateDecryptor(key, iv))
            using (var s = new CryptoStream(ct_stream, dec, CryptoStreamMode.Read))
            {
                s.CopyTo(pt_stream);
            }
            Buffer.BlockCopy(tmp, 0, @out, 0, tmp.Length);
            return 0;
        }

        private void btnDecrypt_Click(object sender, EventArgs e)
        {
            var ofd = new OpenFileDialog();
            ofd.Filter = "Package file (*.pkg)|*.pkg";

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                var IO = new EndianIO(ofd.FileName, EndianType.BigEndian, true);
                
                IO.SeekTo(0x2580);
                byte[] data = RSA2048Decrypt(IO.In.ReadBytes(0x180), RSAKeyset.PkgDerivedKey3Keyset);

                uint entry_count = IO.In.SeekNReadUInt32(0x10);
                uint file_table_offset = IO.In.SeekNReadUInt32(0x18);

                IO.SeekTo(file_table_offset);

                PackageEntry[] entry = new PackageEntry[entry_count];
                for (int i = 0; i < entry_count; ++i) {
                    entry[i].type = IO.In.ReadUInt32();
                    entry[i].unk1 = IO.In.ReadUInt32();
                    entry[i].flags1 = IO.In.ReadUInt32();
                    entry[i].flags2 = IO.In.ReadUInt32();
                    entry[i].offset = IO.In.ReadUInt32();
                    entry[i].size = IO.In.ReadUInt32();
                    entry[i].padding = IO.In.ReadBytes(8);

                    entry[i].key_index = ((entry[i].flags2 & 0xF000) >> 12);
                    entry[i].is_encrypted = ((entry[i].flags1 & 0x80000000) != 0) ? true : false;
                }

                for (int i = 0; i < entry_count; ++i) {
                    if (entry[i].is_encrypted != false) {
                        byte[] entry_data = new byte[0x40];
                        Array.Copy(entry[i].ToArray(), entry_data, 0x20);
                        Array.Copy(data, 0, entry_data, 0x20, 0x20);

                        byte[] iv = new byte[0x10], key = new byte[0x10];
                        byte[] hash = SHA3_256.HashData(entry_data);
                        Array.Copy(hash, 0, iv, 0, 0x10);
                        Array.Copy(hash, 0x10, key, 0, 0x10);

                        IO.In.BaseStream.Position = entry[i].offset;
                        uint size = entry[i].size;
                        if (size % 0x10 != 0)
                        {
                            size = size + 0x10 - (size % 0x10);
                            
                        }
                        Console.WriteLine("size : {0}", size);
                        byte[] file_data = new byte[size]; 
                        AesCbcCfb128Decrypt(file_data,IO.In.ReadBytes(size), size, key, iv);
                        File.WriteAllBytes(ofd.FileName + "_" + entry[i].type.ToString("X"), file_data);
                    }
                }
            }
        }
    }
}